{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","transaction","data","useEffect","get","then","response","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","income","alt","Intl","NumberFormat","style","currency","format","outcome","className","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logo","onClick","form","TransactionTypeContainer","TransactionTypeButton","button","isActive","activeColor","transparentize","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","e","target","Number","incomeImg","outcomeImg","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65c02b82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: 'https://localhost:3000/api',\n});","import { createContext, ReactNode, useContext, useEffect, useState } from 'react';\nimport { api } from '../services/api';\n\ninterface Transactions {\n  id: number;\n  title: string;\n  type: string;\n  category: string;\n  amount: number;\n  createdAt: string;\n}\n\ntype TransactionInput = Omit<Transactions, 'id' | 'createdAt'>; \n\ninterface TransactionsProviderProps {\n  children: ReactNode;\n}\n\ninterface TransactionsContextData {\n  transactions: Transactions[];\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n  );\n\nexport function TransactionsProvider({children}: TransactionsProviderProps) {\n  const [transactions, setTransactions] = useState<Transactions[]>([]);\n\n  useEffect(() => {\n    api.get('transactions')\n        .then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transactionInput: TransactionInput) {\n    const { data: { transaction } } = await api.post('/transactions', {\n      ...transactionInput,\n      createdAt: new Date()\n    });\n\n    setTransactions([\n      ...transactions,\n      transaction\n    ])\n  }\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createTransaction}}>\n      {children}\n    </TransactionsContext.Provider>\n  )\n}\n\nexport function useTransactions() {\n  const context =  useContext(TransactionsContext);\n\n  return context;\n}\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n  margin-top: -10rem;\n\n  div {\n    background: var(--shape);\n    padding: 1.5rem 2rem;\n    border-radius: 0.25rem;\n    color: var(--text-title);\n\n    header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n\n    strong {\n      display: block;\n      margin-top: 1rem;\n      font-size: 2rem;\n      font-weight: 500;\n      line-height: 3rem;\n    }\n\n    &.total-container {\n      background: var(--green);\n    }\n  }\n`;","import income from '../../assets/income.svg';\nimport outcome from '../../assets/outcome.svg';\nimport total from '../../assets/total.svg';\nimport { useTransactions } from \"../../hooks/useTransactions\";\nimport { Container } from \"./styles\";\n\nexport function Summary() {\n  const { transactions } = useTransactions();\n\n  const summary = transactions.reduce((acc, transaction) => {\n    if(transaction.type === 'deposit') {\n      acc.deposits += transaction.amount;\n      acc.total += transaction.amount;\n    } else {\n      acc.withdraws += transaction.amount;\n      acc.total -= transaction.amount;\n    }\n\n    return acc;\n  }, {\n    deposits: 0,\n    withdraws: 0,\n    total: 0\n  })\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Entradas</p>\n          <img src={income} alt=\"Entradas\" />\n        </header>\n        <strong>\n          {\n            new Intl.NumberFormat('pt-BR', {\n              style: 'currency',\n              currency: 'BRL'\n            }).format(summary.deposits)\n          }\n        </strong>\n      </div>\n      <div>\n        <header>\n          <p>Sa√≠das</p>\n          <img src={outcome} alt=\"Entradas\" />\n        </header>\n        <strong>\n          - {\n            new Intl.NumberFormat('pt-BR', {\n              style: 'currency',\n              currency: 'BRL'\n            }).format(summary.withdraws)\n          }\n        </strong>\n      </div>\n      <div className=\"total-container\">\n        <header>\n          <p>Total</p>\n          <img src={total} alt=\"Entradas\" />\n        </header>\n        <strong>\n          {\n            new Intl.NumberFormat('pt-BR', {\n              style: 'currency',\n              currency: 'BRL'\n            }).format(summary.total)\n          }\n        </strong>\n      </div>\n    </Container>\n  )\n}\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n\n  table {\n    width: 100%;\n    border-spacing: 0.5rem;\n\n    th {\n      color: var(--text-body);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n    }\n\n    td {\n      padding: 1rem 2rem;\n      border: 0;\n      background: var(--shape);\n      color: var(--text-body);\n      border-radius: 0.25rem;\n\n      &:first-child {\n        color: var(--text-body);\n      }\n\n      &.deposit {\n        color: var(--green);\n      }\n\n      &.withdraw {\n        color: var(--red);\n      }\n    }\n  }\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\nimport { Container } from \"./styles\";\n\nexport default function TransactionsTable() {\n  const { transactions } = useTransactions();\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>T√≠tulo</th>\n            <th>Valor</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            transactions.map(transaction => (\n              <tr key={transaction.id}>\n                <td>{transaction.title}</td>\n                <td className={transaction.type}>\n                  {new Intl.NumberFormat('pt-BR', {\n                    style: 'currency',\n                    currency: 'BRL'\n                  }).format(transaction.amount)}\n                </td>\n                <td>{transaction.category}</td>\n                <td>\n                {new Intl.DateTimeFormat('pt-BR').format(new Date(transaction.createdAt))}\n                </td>\n              </tr> \n            ))\n          }\n        </tbody>\n      </table>\n    </Container>\n  )\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2.5rem 1rem;\n`;","import { Summary } from \"../Summary\";\nimport TransactionsTable from \"../TransactionsTable\";\nimport { Container } from \"./styles\";\n\nexport function Dashboard() {\n  return (\n    <Container>\n      <Summary />\n      <TransactionsTable />\n    </Container>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components';\n\nexport const Container = styled.header`\n  background: var(--blue);\n`;\n\nexport const Content = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n\n  padding: 2rem 1rem 12rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    font-size: 1rem;\n    color: #FFF;\n    background: var(--blue-light);\n    border: 0;\n    padding: 0 2rem;\n    border-radius: 0.25rem;\n    height: 3rem;\n    transition: filter 0,2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`;","import logo from '../../assets/logo.svg';\n\nimport { Container, Content } from './styles';\n\ninterface HeaderProps {\n  onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({onOpenNewTransactionModal}: HeaderProps) {\n  return (\n    <Container>\n      <Content>\n        <img src={logo}  alt=\"dt money\"/>\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\n          Nova Transa√ß√£o\n        </button>\n      </Content>\n    </Container>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import { darken, transparentize } from 'polished';\nimport styled from \"styled-components\";\n\nexport const Container = styled.form`\n  h2 {\n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n  }\n\n  input {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    border-radius: 0.25rem;\n\n    border: 1px solid #d7d7d7;\n    background: #e7e9ee;\n\n    font-weight: 400;\n    font-size: 1rem;\n\n    &::placeholder {\n      color: var(--text-body);\n    }\n\n    & + input {\n      margin-top: 1rem;\n    }\n  }\n\n  button[type = 'submit'] {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    background: var(--green);\n    color: #FFF;\n    border-radius: 0.25rem;\n    border: 0;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    font-weight: 600;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`;\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n`;\n\ninterface TransactionTypeButtonProps {\n  isActive: boolean;\n  activeColor: string;\n}\n\nexport const TransactionTypeButton = styled.button<TransactionTypeButtonProps>`\n  height: 4rem;\n    border: 1px solid #d7d7d7;\n    border-radius: 0.25rem;\n    background: ${({isActive, activeColor}) => isActive \n    ? transparentize(0.9, activeColor) \n    : 'transparent'};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    transition: border-color 0.2s;\n\n    &:hover {\n      border-color: ${darken(0.1, '#d7d7d7')};\n    }\n    \n    img {\n      width: 20px;\n      height: 20px;\n    }\n\n    span {\n      display: inline-block;\n      margin-left: 1rem;\n      font-size: 1rem;\n      color: var(--text-title);\n    }\n`;","import { FormEvent, useState } from 'react';\nimport Modal from 'react-modal';\nimport closeImg from '../../assets/close.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport { useTransactions } from '../../hooks/useTransactions';\nimport { Container, TransactionTypeButton, TransactionTypeContainer } from './styles';\n\ninterface NewTransactionModalProps {\n  isOpen: boolean;\n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({isOpen, onRequestClose}: NewTransactionModalProps) {\n  const { createTransaction } = useTransactions();\n\n  const [title, setTitle] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [category, setCategory] = useState('');\n  const [type, setType] = useState('deposit');\n\n  async function handleCreateNewTransaction(event: FormEvent) {\n    event.preventDefault();\n\n    await createTransaction({\n      title,\n      amount,\n      category,\n      type\n    })\n\n    setTitle('');\n    setAmount(0);\n    setCategory('');\n    setType('deposit');\n\n    onRequestClose()\n  }\n\n  return (\n    <Modal \n       isOpen={isOpen} \n       onRequestClose={onRequestClose}\n       overlayClassName=\"react-modal-overlay\"\n       className=\"react-modal-content\"\n     >\n       <button \n        type=\"button\" \n        onClick={onRequestClose} \n        className=\"react-modal-close\"\n       >\n         <img src={closeImg} alt=\"Fechar modal\" />\n       </button>\n\n       <Container onSubmit={handleCreateNewTransaction}>\n        <h2>Cadastrar Transa√ß√£o</h2>\n\n        <input \n          type=\"text\" \n          placeholder=\"T√≠tulo\"\n          value={title}\n          onChange={e => setTitle(e.target.value)}\n        />\n\n        <input \n          type=\"number\" \n          placeholder=\"Valor\"\n          value={amount}\n          onChange={e => setAmount(Number(e.target.value))}\n        />\n\n        <TransactionTypeContainer>\n          <TransactionTypeButton\n           type=\"button\"\n           isActive={type === 'deposit'}\n           activeColor=\"#33CC95\"\n           onClick={() => setType('deposit')}\n          >\n            <img src={incomeImg} alt=\"Entrada\" />\n            <span>Entrada</span>\n          </TransactionTypeButton>\n\n          <TransactionTypeButton\n           type=\"button\"\n           isActive={type === 'withdraw'}\n           activeColor=\"#E52E4D\"\n           onClick={() => setType('withdraw')}\n          >\n            <img src={outcomeImg} alt=\"Sa√≠da\" />\n            <span>Sa√≠da</span>\n          </TransactionTypeButton>\n        </TransactionTypeContainer>\n\n        <input \n          placeholder=\"Categoria\"\n          value={category}\n          onChange={e => setCategory(e.target.value)}\n        />\n\n        <button type=\"submit\">\n          Cadastrar\n        </button>\n       </Container>\n     </Modal>\n  )\n}\n","import {createGlobalStyle} from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --red: #E52E4D;\n    --green: #33CC95;\n    --blue: #5429CC;\n\n    --blue-light: #6933FF;\n\n    --text-title: #363F5F;\n    --text-body: #969CB3;\n\n    --background: #f0f2f5;\n    --shape: #FFFFFF;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    @media (max-width: 1080px) {\n      font-size: 93.75%;\n    }\n\n    @media (max-width: 720px) {\n      font-size: 87.5%;\n    }\n  }\n\n  body {\n    background: var(--background);\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, textarea, button {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay {\n    background: rgba(0, 0, 0, 0.5);\n\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .react-modal-content {\n    width: 100%;\n    max-width: 576px;\n    background: var(--background);\n    padding: 3rem;\n    position: relative;\n    border-radius: 0.25rem;\n  }\n\n  .react-modal-close {\n    position: absolute;\n    right: 1.5rem;\n    top: 1.5rem;\n    border: 0;\n    background: transparent;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.8);\n    }\n  }\n`;","import { useState } from \"react\";\nimport Modal from 'react-modal';\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from \"./components/NewTransactionModal\";\nimport { TransactionsProvider } from \"./hooks/useTransactions\";\nimport { GlobalStyle } from \"./styles/global\";\n\nModal.setAppElement('#root')\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionsProvider>\n     <GlobalStyle />\n\n     <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n\n     <NewTransactionModal \n      isOpen={isNewTransactionModalOpen} \n      onRequestClose={handleCloseNewTransactionModal} \n     />\n\n     <Dashboard />\n    </TransactionsProvider>\n  );\n}\n\n","import { createServer, Model } from 'miragejs';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Freelancer de Website',\n          type: 'deposit',\n          category: 'Dev',\n          amount: 6000,\n          createdAt: new Date('2021-02-12 09:00:00')\n        },\n        {\n          id: 2,\n          title: 'Aluguel',\n          type: 'withdraw',\n          category: 'Casa',\n          amount: 1100,\n          createdAt: new Date('2021-02-14 11:00:00')\n        }\n      ],\n    })\n  },\n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction')\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create('transaction', data)\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}